// <auto-generated />
using System;
using System.Collections.Generic;
using CleanArchitecture.Infrastructure.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CleanArchitecture.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240521172909_mig_21")]
    partial class mig_21
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.29")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitecture.Core.DTOs.Account.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.City.AllWorldCities", b =>
                {
                    b.Property<int?>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("id"));

                    b.Property<string>("admin_name")
                        .HasColumnType("text");

                    b.Property<string>("capital")
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .HasColumnType("text");

                    b.Property<string>("city_ascii")
                        .HasColumnType("text");

                    b.Property<string>("country")
                        .HasColumnType("text");

                    b.Property<string>("iso2")
                        .HasColumnType("text");

                    b.Property<string>("iso3")
                        .HasColumnType("text");

                    b.Property<double?>("lat")
                        .HasColumnType("double precision");

                    b.Property<double?>("lng")
                        .HasColumnType("double precision");

                    b.Property<double?>("population")
                        .HasColumnType("double precision");

                    b.HasKey("id");

                    b.ToTable("AllWorldCities");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.Breakfast", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RegularOpeningHoursId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("_PRICE_LEVEL")
                        .HasColumnType("integer");

                    b.Property<Guid?>("displayNameId")
                        .HasColumnType("uuid");

                    b.Property<string>("formattedAddress")
                        .HasColumnType("text");

                    b.Property<bool?>("goodForGroups")
                        .HasColumnType("boolean");

                    b.Property<string>("googleId")
                        .HasColumnType("text");

                    b.Property<string>("googleMapsUri")
                        .HasColumnType("text");

                    b.Property<bool?>("liveMusic")
                        .HasColumnType("boolean");

                    b.Property<bool?>("menuForChildren")
                        .HasColumnType("boolean");

                    b.Property<string>("nationalPhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool?>("outdoorSeating")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("paymentOptionsId")
                        .HasColumnType("uuid");

                    b.Property<string>("primaryType")
                        .HasColumnType("text");

                    b.Property<double?>("rating")
                        .HasColumnType("double precision");

                    b.Property<bool?>("reservable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("restroom")
                        .HasColumnType("boolean");

                    b.Property<bool?>("servesBrunch")
                        .HasColumnType("boolean");

                    b.Property<bool?>("servesVegetarianFood")
                        .HasColumnType("boolean");

                    b.Property<string>("shortFormattedAddress")
                        .HasColumnType("text");

                    b.Property<string>("websiteUri")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("RegularOpeningHoursId");

                    b.HasIndex("displayNameId");

                    b.HasIndex("paymentOptionsId");

                    b.ToTable("Breakfast");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.Close", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("day")
                        .HasColumnType("integer");

                    b.Property<int?>("hour")
                        .HasColumnType("integer");

                    b.Property<int?>("minute")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Close");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.Dinner", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RegularOpeningHoursId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("_PRICE_LEVEL")
                        .HasColumnType("integer");

                    b.Property<Guid?>("displayNameId")
                        .HasColumnType("uuid");

                    b.Property<string>("formattedAddress")
                        .HasColumnType("text");

                    b.Property<bool?>("goodForGroups")
                        .HasColumnType("boolean");

                    b.Property<string>("googleId")
                        .HasColumnType("text");

                    b.Property<string>("googleMapsUri")
                        .HasColumnType("text");

                    b.Property<bool?>("liveMusic")
                        .HasColumnType("boolean");

                    b.Property<bool?>("menuForChildren")
                        .HasColumnType("boolean");

                    b.Property<string>("nationalPhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool?>("outdoorSeating")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("paymentOptionsId")
                        .HasColumnType("uuid");

                    b.Property<string>("primaryType")
                        .HasColumnType("text");

                    b.Property<double?>("rating")
                        .HasColumnType("double precision");

                    b.Property<bool?>("reservable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("restroom")
                        .HasColumnType("boolean");

                    b.Property<bool?>("servesBeer")
                        .HasColumnType("boolean");

                    b.Property<bool?>("servesBrunch")
                        .HasColumnType("boolean");

                    b.Property<bool?>("servesVegetarianFood")
                        .HasColumnType("boolean");

                    b.Property<bool?>("servesWine")
                        .HasColumnType("boolean");

                    b.Property<string>("shortFormattedAddress")
                        .HasColumnType("text");

                    b.Property<string>("websiteUri")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("RegularOpeningHoursId");

                    b.HasIndex("displayNameId");

                    b.HasIndex("paymentOptionsId");

                    b.ToTable("Dinner");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.DisplayName", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("langugageCode")
                        .HasColumnType("text");

                    b.Property<string>("text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DisplayName");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.EventAfterDinner", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("_PRICE_LEVEL")
                        .HasColumnType("integer");

                    b.Property<Guid?>("displayNameId")
                        .HasColumnType("uuid");

                    b.Property<string>("formattedAddress")
                        .HasColumnType("text");

                    b.Property<bool?>("goodForChildren")
                        .HasColumnType("boolean");

                    b.Property<string>("googleId")
                        .HasColumnType("text");

                    b.Property<string>("googleMapsUri")
                        .HasColumnType("text");

                    b.Property<string>("nationalPhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("paymentOptionsId")
                        .HasColumnType("uuid");

                    b.Property<string>("primaryType")
                        .HasColumnType("text");

                    b.Property<double?>("rating")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("regularOpeningHoursId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("restroom")
                        .HasColumnType("boolean");

                    b.Property<string>("websiteUri")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("displayNameId");

                    b.HasIndex("paymentOptionsId");

                    b.HasIndex("regularOpeningHoursId");

                    b.ToTable("EventAfterDinner");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.FirstPlaceForRoute", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("_PRICE_LEVEL")
                        .HasColumnType("integer");

                    b.Property<Guid?>("displayNameId")
                        .HasColumnType("uuid");

                    b.Property<string>("formattedAddress")
                        .HasColumnType("text");

                    b.Property<bool?>("goodForChildren")
                        .HasColumnType("boolean");

                    b.Property<string>("googleId")
                        .HasColumnType("text");

                    b.Property<string>("googleMapsUri")
                        .HasColumnType("text");

                    b.Property<string>("nationalPhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("paymentOptionsId")
                        .HasColumnType("uuid");

                    b.Property<string>("primaryType")
                        .HasColumnType("text");

                    b.Property<double?>("rating")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("regularOpeningHoursId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("restroom")
                        .HasColumnType("boolean");

                    b.Property<string>("websiteUri")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("displayNameId");

                    b.HasIndex("paymentOptionsId");

                    b.HasIndex("regularOpeningHoursId");

                    b.ToTable("FirstPlaceForRoute");

                    b.HasDiscriminator<string>("Discriminator").HasValue("FirstPlaceForRoute");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.Location", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("latitude")
                        .HasColumnType("double precision");

                    b.Property<double?>("longitude")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.Lunch", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RegularOpeningHoursId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("_PRICE_LEVEL")
                        .HasColumnType("integer");

                    b.Property<Guid?>("displayNameId")
                        .HasColumnType("uuid");

                    b.Property<string>("formattedAddress")
                        .HasColumnType("text");

                    b.Property<bool?>("goodForGroups")
                        .HasColumnType("boolean");

                    b.Property<string>("googleId")
                        .HasColumnType("text");

                    b.Property<string>("googleMapsUri")
                        .HasColumnType("text");

                    b.Property<bool?>("liveMusic")
                        .HasColumnType("boolean");

                    b.Property<bool?>("menuForChildren")
                        .HasColumnType("boolean");

                    b.Property<string>("nationalPhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool?>("outdoorSeating")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("paymentOptionsId")
                        .HasColumnType("uuid");

                    b.Property<string>("primaryType")
                        .HasColumnType("text");

                    b.Property<double?>("rating")
                        .HasColumnType("double precision");

                    b.Property<bool?>("reservable")
                        .HasColumnType("boolean");

                    b.Property<bool?>("restroom")
                        .HasColumnType("boolean");

                    b.Property<bool?>("servesBeer")
                        .HasColumnType("boolean");

                    b.Property<bool?>("servesBrunch")
                        .HasColumnType("boolean");

                    b.Property<bool?>("servesVegetarianFood")
                        .HasColumnType("boolean");

                    b.Property<bool?>("servesWine")
                        .HasColumnType("boolean");

                    b.Property<string>("shortFormattedAddress")
                        .HasColumnType("text");

                    b.Property<string>("websiteUri")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("RegularOpeningHoursId");

                    b.HasIndex("displayNameId");

                    b.HasIndex("paymentOptionsId");

                    b.ToTable("Lunch");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.Open", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("day")
                        .HasColumnType("integer");

                    b.Property<int?>("hour")
                        .HasColumnType("integer");

                    b.Property<int?>("minute")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Open");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.PaymentOptions", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("acceptsCashOnly")
                        .HasColumnType("text");

                    b.Property<string>("acceptsCreditCards")
                        .HasColumnType("text");

                    b.Property<string>("acceptsDebitCards")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PaymentOptions");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.Period", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("RegularOpeningHoursId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("closeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("openId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RegularOpeningHoursId");

                    b.HasIndex("closeId");

                    b.HasIndex("openId");

                    b.ToTable("Period");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.Photos", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BreakfastId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("DinnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EventAfterDinnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FirstPlaceForRouteId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LunchId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TravelOtelId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("heightPx")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<int?>("widthPx")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BreakfastId");

                    b.HasIndex("DinnerId");

                    b.HasIndex("EventAfterDinnerId");

                    b.HasIndex("FirstPlaceForRouteId");

                    b.HasIndex("LunchId");

                    b.HasIndex("TravelOtelId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.RegularOpeningHours", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("openNow")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("weekdayDescriptions")
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("RegularOpeningHours");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.TravelOtel", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("_PRICE_LEVEL")
                        .HasColumnType("integer");

                    b.Property<Guid?>("displayNameId")
                        .HasColumnType("uuid");

                    b.Property<string>("formattedAddress")
                        .HasColumnType("text");

                    b.Property<bool?>("goodForChildren")
                        .HasColumnType("boolean");

                    b.Property<string>("googleId")
                        .HasColumnType("text");

                    b.Property<string>("googleMapsUri")
                        .HasColumnType("text");

                    b.Property<string>("internationalPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("nationalPhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("paymentOptionsId")
                        .HasColumnType("uuid");

                    b.Property<string>("primaryType")
                        .HasColumnType("text");

                    b.Property<double?>("rating")
                        .HasColumnType("double precision");

                    b.Property<Guid?>("regularOpeningHoursId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("restroom")
                        .HasColumnType("boolean");

                    b.Property<string>("star")
                        .HasColumnType("text");

                    b.Property<string>("websiteUri")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("displayNameId");

                    b.HasIndex("paymentOptionsId");

                    b.HasIndex("regularOpeningHoursId");

                    b.ToTable("TravelOtel");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.TravelRoute", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<Guid?>("BreakfastId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Days")
                        .HasColumnType("integer");

                    b.Property<Guid?>("DinnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EventAfterDinnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("FirstPlaceForRouteId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("LunchId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("OtelId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SecondPlaceForRouteId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ThirdPlaceForRouteId")
                        .HasColumnType("uuid");

                    b.Property<string>("TransportVehicle")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("_PRICE_LEVEL")
                        .HasColumnType("integer");

                    b.Property<bool?>("isLiked")
                        .HasColumnType("boolean");

                    b.Property<string>("routeName")
                        .HasColumnType("text");

                    b.Property<string>("userId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BreakfastId");

                    b.HasIndex("DinnerId");

                    b.HasIndex("EventAfterDinnerId");

                    b.HasIndex("FirstPlaceForRouteId");

                    b.HasIndex("LunchId");

                    b.HasIndex("OtelId");

                    b.HasIndex("SecondPlaceForRouteId");

                    b.HasIndex("ThirdPlaceForRouteId");

                    b.ToTable("TravelRoutes");
                });

            modelBuilder.Entity("CleanArchitecture.Infrastructure.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.SecondPlaceForRoute", b =>
                {
                    b.HasBaseType("CleanArchitecture.Core.Entities.TravelEntities.FirstPlaceForRoute");

                    b.HasDiscriminator().HasValue("SecondPlaceForRoute");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.ThirdPlaceForRoute", b =>
                {
                    b.HasBaseType("CleanArchitecture.Core.Entities.TravelEntities.FirstPlaceForRoute");

                    b.HasDiscriminator().HasValue("ThirdPlaceForRoute");
                });

            modelBuilder.Entity("CleanArchitecture.Core.DTOs.Account.RefreshToken", b =>
                {
                    b.HasOne("CleanArchitecture.Infrastructure.Models.ApplicationUser", null)
                        .WithMany("RefreshTokens")
                        .HasForeignKey("ApplicationUserId");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.Breakfast", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.RegularOpeningHours", "RegularOpeningHours")
                        .WithMany()
                        .HasForeignKey("RegularOpeningHoursId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.DisplayName", "displayName")
                        .WithMany()
                        .HasForeignKey("displayNameId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.PaymentOptions", "paymentOptions")
                        .WithMany()
                        .HasForeignKey("paymentOptionsId");

                    b.Navigation("Location");

                    b.Navigation("RegularOpeningHours");

                    b.Navigation("displayName");

                    b.Navigation("paymentOptions");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.Dinner", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.RegularOpeningHours", "RegularOpeningHours")
                        .WithMany()
                        .HasForeignKey("RegularOpeningHoursId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.DisplayName", "displayName")
                        .WithMany()
                        .HasForeignKey("displayNameId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.PaymentOptions", "paymentOptions")
                        .WithMany()
                        .HasForeignKey("paymentOptionsId");

                    b.Navigation("Location");

                    b.Navigation("RegularOpeningHours");

                    b.Navigation("displayName");

                    b.Navigation("paymentOptions");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.EventAfterDinner", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.DisplayName", "displayName")
                        .WithMany()
                        .HasForeignKey("displayNameId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.PaymentOptions", "paymentOptions")
                        .WithMany()
                        .HasForeignKey("paymentOptionsId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.RegularOpeningHours", "regularOpeningHours")
                        .WithMany()
                        .HasForeignKey("regularOpeningHoursId");

                    b.Navigation("Location");

                    b.Navigation("displayName");

                    b.Navigation("paymentOptions");

                    b.Navigation("regularOpeningHours");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.FirstPlaceForRoute", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.DisplayName", "displayName")
                        .WithMany()
                        .HasForeignKey("displayNameId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.PaymentOptions", "paymentOptions")
                        .WithMany()
                        .HasForeignKey("paymentOptionsId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.RegularOpeningHours", "regularOpeningHours")
                        .WithMany()
                        .HasForeignKey("regularOpeningHoursId");

                    b.Navigation("Location");

                    b.Navigation("displayName");

                    b.Navigation("paymentOptions");

                    b.Navigation("regularOpeningHours");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.Lunch", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.RegularOpeningHours", "RegularOpeningHours")
                        .WithMany()
                        .HasForeignKey("RegularOpeningHoursId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.DisplayName", "displayName")
                        .WithMany()
                        .HasForeignKey("displayNameId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.PaymentOptions", "paymentOptions")
                        .WithMany()
                        .HasForeignKey("paymentOptionsId");

                    b.Navigation("Location");

                    b.Navigation("RegularOpeningHours");

                    b.Navigation("displayName");

                    b.Navigation("paymentOptions");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.Period", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.RegularOpeningHours", null)
                        .WithMany("periods")
                        .HasForeignKey("RegularOpeningHoursId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.Close", "close")
                        .WithMany()
                        .HasForeignKey("closeId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.Open", "open")
                        .WithMany()
                        .HasForeignKey("openId");

                    b.Navigation("close");

                    b.Navigation("open");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.Photos", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.Breakfast", null)
                        .WithMany("photos")
                        .HasForeignKey("BreakfastId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.Dinner", null)
                        .WithMany("photos")
                        .HasForeignKey("DinnerId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.EventAfterDinner", null)
                        .WithMany("photos")
                        .HasForeignKey("EventAfterDinnerId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.FirstPlaceForRoute", null)
                        .WithMany("photos")
                        .HasForeignKey("FirstPlaceForRouteId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.Lunch", null)
                        .WithMany("photos")
                        .HasForeignKey("LunchId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.TravelOtel", null)
                        .WithMany("photos")
                        .HasForeignKey("TravelOtelId");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.TravelOtel", b =>
                {
                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.DisplayName", "displayName")
                        .WithMany()
                        .HasForeignKey("displayNameId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.PaymentOptions", "paymentOptions")
                        .WithMany()
                        .HasForeignKey("paymentOptionsId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.RegularOpeningHours", "regularOpeningHours")
                        .WithMany()
                        .HasForeignKey("regularOpeningHoursId");

                    b.Navigation("Location");

                    b.Navigation("displayName");

                    b.Navigation("paymentOptions");

                    b.Navigation("regularOpeningHours");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.TravelRoute", b =>
                {
                    b.HasOne("CleanArchitecture.Infrastructure.Models.ApplicationUser", null)
                        .WithMany("TravelRoutes")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.Breakfast", "Breakfast")
                        .WithMany()
                        .HasForeignKey("BreakfastId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.Dinner", "Dinner")
                        .WithMany()
                        .HasForeignKey("DinnerId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.EventAfterDinner", "EventAfterDinner")
                        .WithMany()
                        .HasForeignKey("EventAfterDinnerId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.FirstPlaceForRoute", "FirstPlaceForRoute")
                        .WithMany()
                        .HasForeignKey("FirstPlaceForRouteId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.Lunch", "Lunch")
                        .WithMany()
                        .HasForeignKey("LunchId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.TravelOtel", "Otel")
                        .WithMany()
                        .HasForeignKey("OtelId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.SecondPlaceForRoute", "SecondPlaceForRoute")
                        .WithMany()
                        .HasForeignKey("SecondPlaceForRouteId");

                    b.HasOne("CleanArchitecture.Core.Entities.TravelEntities.ThirdPlaceForRoute", "ThirdPlaceForRoute")
                        .WithMany()
                        .HasForeignKey("ThirdPlaceForRouteId");

                    b.Navigation("Breakfast");

                    b.Navigation("Dinner");

                    b.Navigation("EventAfterDinner");

                    b.Navigation("FirstPlaceForRoute");

                    b.Navigation("Lunch");

                    b.Navigation("Otel");

                    b.Navigation("SecondPlaceForRoute");

                    b.Navigation("ThirdPlaceForRoute");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CleanArchitecture.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CleanArchitecture.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitecture.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CleanArchitecture.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.Breakfast", b =>
                {
                    b.Navigation("photos");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.Dinner", b =>
                {
                    b.Navigation("photos");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.EventAfterDinner", b =>
                {
                    b.Navigation("photos");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.FirstPlaceForRoute", b =>
                {
                    b.Navigation("photos");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.Lunch", b =>
                {
                    b.Navigation("photos");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.RegularOpeningHours", b =>
                {
                    b.Navigation("periods");
                });

            modelBuilder.Entity("CleanArchitecture.Core.Entities.TravelEntities.TravelOtel", b =>
                {
                    b.Navigation("photos");
                });

            modelBuilder.Entity("CleanArchitecture.Infrastructure.Models.ApplicationUser", b =>
                {
                    b.Navigation("RefreshTokens");

                    b.Navigation("TravelRoutes");
                });
#pragma warning restore 612, 618
        }
    }
}
